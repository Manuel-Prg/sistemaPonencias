---
import '../../styles/stylesRevisarPonencia.css';
import '../../styles/logos.css';
import { PonenciaService } from '../../lib/services/ponencias/ponencia.service';
import type { Ponencia, EstadoPonencia } from '../../lib/models/ponencia';
import BotonMobile from '../../components/shared/botonMobile.astro';

// Genera las rutas estáticas para cada ponencia
export async function getStaticPaths() {
  const ponenciaService = new PonenciaService();
  const ponencias = await ponenciaService.getPonencias();

  return ponencias.map((ponencia) => ({
    params: { id: ponencia.id },
    props: { ponencia },
  }));
}

interface Props {
  ponencia: Ponencia;
}

const { ponencia } = Astro.props;
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Revisar Ponencia - {ponencia.titulo}</title>
    <link rel="icon" type="image/x-icon" href="/favicon/favicon_io/favicon.ico" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon_io/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon_io/favicon-16x16.png" />
    <style>
    .container {
        display: flex;
        justify-content: center;
        gap: 1rem;
        padding: 2rem;
        height: calc(100vh - 100px);
        width: 100%;
        max-width: 1800px;
        margin: 0 auto;
        transition: all 0.3s ease-in-out;
      }

      .ponencia-card {
        flex: 1;
        background: rgba(81, 112, 255, 0.2);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.3);
        padding: 2rem;
        display: flex;
        flex-direction: column;
        height: 100%;
        max-width: 60%;
        transition: all 0.3s ease-in-out;
        margin: 0 auto;
      }

      .comentarios-card {
        flex: 0.8;
        background: rgba(81, 112, 255, 0.2);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.3);
        padding: 2rem;
        display: none;
        flex-direction: column;
        height: 100%;
        max-width: 35%;
        opacity: 0;
        transform: translateX(50px);
        transition: all 0.3s ease-in-out;
      }

      .container.with-comments {
        justify-content: space-between;
      }

      .container.with-comments .ponencia-card {
        max-width: 55%;
      }

      .comentarios-card.visible {
        display: flex;
        opacity: 1;
        transform: translateX(0);
      }
      textarea::placeholder {
        color: rgba(255, 255, 255, 0.6);
      }

    /* Para Firefox */
    textarea::-moz-placeholder {
      color: rgba(255, 255, 255, 0.6);
    }

    /* Para Chrome/Safari/Edge */
    textarea::-webkit-input-placeholder {
      color: rgba(255, 255, 255, 0.6);
    }

    /* Para Internet Explorer */
    textarea:-ms-input-placeholder {
      color: rgba(255, 255, 255, 0.6);
    }

      @media (max-width: 1024px) {
        .container {
          flex-direction: column;
          height: auto;
        }
        .ponencia-card,
        .comentarios-card {
          max-width: 100%;
          /*margin-bottom: 1rem;*/
        }

        .comentarios-card {
          position: static; /* Quitar posición fija */
          transform: none;
          margin-top: 1rem;
        }

        .comentarios-card.visible {
          display: flex;
          opacity: 1;
          transform: none;
        }

        .container.with-comments {
          padding-right: 1rem;
        }

        .container.with-comments .ponencia-card {
          max-width: 100% !important;
        }

        /* Botones en columna */
        .action-buttons {
          flex-direction: column;
          gap: 0.5rem;
        }

        .btn {
          width: 100%;
          margin: 0;
        }

        /* Ajustes de espaciado */
        .content {
          max-height: 50vh;
          overflow-y: auto;
        }

        /* Header ajustado para móvil */
        .header {
          padding: 1rem;
        }

        .logos-container {
          gap: 1rem;
        }

        .logo-ujat,
        .logo-dacity,
        .woman-silhouette,
        .logo-dev {
          height: 30px;
        }
      }

      @media (max-width: 768px) {
        .container {
          flex-direction: column;
          height: auto;
          padding: 2rem;
          align-items: center; /* Centra las tarjetas horizontalmente */
        }

        .ponencia-card, .comentarios-card {
          width: 100%; /* Ancho completo */
          max-width: 100%;
          margin: 0 auto; /* Centra las tarjetas */
          height: auto;
          min-height: 50vh;
        }
        .container.with-comments {
            padding: 1rem;
          }

        .container.with-comments .ponencia-card {
          max-width: 100% !important;
        }
        .dialog-overlay {
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          width: 90%;
          max-height: 80vh;
          z-index: 1000;
        }

        body {
          padding-top: 60px;
          padding-bottom: 80px;
        }

        .header {
          height: 60px;
        }

        .title {
          font-size: 1.3rem;
        }

        .content {
          font-size: 1rem;
          padding: 1rem;
        }

        .action-buttons {
          flex-direction: column;
          gap: 1rem;
        }

        .title {
          font-size: 1.25rem;
        }

        textarea {
          min-height: 120px;
        }

        /* Ajuste de botones para móvil */
        .btn {
          padding: 0.75rem;
          font-size: 0.9rem;
        }
      }
      /* Ajustes específicos para pantallas muy pequeñas */
      @media (max-width: 320px) {
        .content {
          font-size: 0.9rem;
          padding: 0.75rem;
        }
      }

      /* Estilos para scrollbars */
      ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
      }

      ::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 4px;
      }

      ::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 4px;
        transition: background 0.3s ease;
      }

      ::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.3);
      }

      /* Estilos para Firefox */
      * {
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.2) rgba(255, 255, 255, 0.1);
      }

      .ponencia-review-container {
        scroll-behavior: smooth;
      }

      .content,
      .evaluations-section,
      .corrections-container {
        scrollbar-gutter: stable;
        overflow-y: auto;
      }
      /* Animaciones */
      @keyframes slideIn {
          from {
              opacity: 0;
              transform: translateX(30px);
          }
          to {
              opacity: 1;
              transform: translateX(0);
          }
      }

    </style>
  </head>

  <body>
    <!-- Header -->
    <header class="header">
      <div class="logo">
        <img
          src="/Logos UJAT/Logos UJAT/Logo 1 blanco.png"
          alt="Logo-ujat"
          class="logo-ujat"
        />
        <img
          src="/logo-dacity/logo-negro_bordes_blancos-sinFondo.png"
          alt="Logo-dacity"
          class="logo-dacity"
        />
        <img
          src="/logo_mujeres/logo_mueres_blanco.png"
          alt="Logo-mujeres"
          class="woman-silhouette"
        />
        <img src="/icon-logo.png" alt="Logo-dev" class="logo-dev" />
      </div>
      <div class="header-buttons">
        <button class="header-btn" id="logout-btn" title="Regresar">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            height="24px"
            viewBox="0 -960 960 960"
            width="24px"
            fill="#e8eaed"
          >
            <path
              d="M647-440H160v-80h487L423-744l57-56 320 320-320 320-57-56 224-224Z"
            ></path>
          </svg>
          <span>Regresar</span>
        </button>
      </div>
    </header>
    <!-- Bottom Navigation for Mobile -->
  <BotonMobile>
  </BotonMobile>

    <!-- Contenedor principal -->
    <div class="container">
      <!-- Tarjeta de ponencia -->
      <div class="ponencia-card">
        <div class="content">
          <h2 class="title">{ponencia.titulo}</h2>

          <div class="resumen">{ponencia.resumen}</div>

          <div class="estado-wrapper">
            <div class="estado-actual">
              <h3>Estado actual</h3>
              <p class="estado-badge">{ponencia.estado}</p>
            </div>

            {ponencia.evaluaciones && ponencia.evaluaciones.length > 0 && (
              <div class="evaluaciones-section">
                <h3>Evaluaciones previas</h3>
                <div class="evaluaciones-list">
                  {ponencia.evaluaciones.map((evaluation) => (
                    <div class="evaluacion-item">
                      <div class="evaluacion-header">
                        <span class="evaluacion-estado">
                          Estado: {evaluation.evaluacion}
                        </span>
                        <span class="evaluacion-fecha">
                          {new Date(evaluation.fecha).toLocaleDateString()}
                        </span>
                      </div>
                      {evaluation.correcciones && (
                        <div class="evaluacion-correcciones">
                          <p>Correcciones solicitadas:</p>
                          <p class="correcciones-texto">
                            {evaluation.correcciones}
                          </p>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>

        <!-- Botones de acción -->
        <div class="action-buttons">
          <button class="btn btn-accept" data-ponencia-id={ponencia.id}>
            Aceptar
          </button>
          <button class="btn btn-reject" data-ponencia-id={ponencia.id}>
            Rechazar
          </button>
          <button class="btn btn-accept-with-obs" data-ponencia-id={ponencia.id}>
            Aceptar con observaciones
          </button>
        </div>
      </div>

      <!-- Tarjeta de comentarios -->
      <div class="comentarios-card" id="comentariosCard">
        <h2 class="title">Observaciones</h2>
        <textarea 
          id="observacionesText" 
          placeholder="Escriba sus observaciones aquí..."
        ></textarea>
        <div class="dialog-buttons">
          <button class="btn btn-primary" id="guardarObservaciones">
            Guardar
          </button>
          <button class="btn btn-secondary" id="cancelarObservaciones">
            Cancelar
          </button>
        </div>
      </div>
    </div>

    <!-- Diálogo para aceptar/rechazar -->
    <div id="dialogOverlay" class="dialog-overlay" style="display: none;">
      <div class="dialog-content">
        <h3 id="dialogTitle">Título del Diálogo</h3>
        <textarea 
          id="dialogComments" 
          placeholder="Ingrese sus comentarios aquí..."
          rows="4"
        ></textarea>
        <div class="dialog-buttons">
          <button id="dialogAccept" class="btn btn-primary">Aceptar</button>
          <button id="dialogCancel" class="btn btn-secondary">Cancelar</button>
        </div>
      </div>
    </div>

    <!-- Backdrop para el modal en móviles -->
    <div class="backdrop" id="backdrop"></div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const container = document.querySelector('.container');
        const ponenciaCard = document.querySelector('.ponencia-card');
        const comentariosCard = document.getElementById('comentariosCard');
        const btnAceptarConObs = document.querySelector('.btn-accept-with-obs');
        const btnGuardarObs = document.getElementById('guardarObservaciones');
        const btnCancelarObs = document.getElementById('cancelarObservaciones');
        const observacionesText = document.getElementById('observacionesText') as HTMLTextAreaElement;
        const backdrop = document.getElementById('backdrop');

        // Mostrar panel de observaciones
        btnAceptarConObs?.addEventListener('click', () => {
          container?.classList.add('with-comments');
          ponenciaCard?.classList.add('with-comments');
          comentariosCard?.classList.add('visible');
          backdrop?.classList.add('visible');
          observacionesText?.focus();
        });

        // Ocultar panel de observaciones
        const ocultarPanelObservaciones = () => {
          container?.classList.remove('with-comments');
          ponenciaCard?.classList.remove('with-comments');
          comentariosCard?.classList.remove('visible');
          backdrop?.classList.remove('visible');
          if (observacionesText) {
            observacionesText.value = '';
          }
        };

        // Manejar cancelar
        btnCancelarObs?.addEventListener('click', ocultarPanelObservaciones);

        // Manejar guardar
        btnGuardarObs?.addEventListener('click', () => {
          const observaciones = observacionesText?.value.trim();
          
          if (!observaciones) {
            alert('Por favor, ingrese sus observaciones antes de guardar.');
            return;
          }

          // Aquí puedes agregar la lógica para guardar las observaciones
          console.log('Guardando observaciones:', observaciones);
          ocultarPanelObservaciones();
        });

        // Cerrar panel al hacer clic en el backdrop
        backdrop?.addEventListener('click', ocultarPanelObservaciones);
      });
    </script>
  </body>
</html>